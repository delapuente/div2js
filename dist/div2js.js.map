{
  "version": 3,
  "file": "/home/salva/workspace/div2js/.tmp/div2js.js",
  "sources": [
    "div2lang.js",
    "ast.js",
    "templates.js",
    "context.js",
    "div2trans.js",
    "div2js.js"
  ],
  "names": [],
  "mappingspnCA,ADqnCA;ACpnrGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACrFA,ADsFA;ACr
  "sourcesContent": [
    "\n\ndefine('div2lang',['require'],function(require){\nvar o=function(k,v,o,l){for(o=o||{},l=k.length;l--;o[k[l]]=v);return o},$V0=[1,7],$V1=[1,9],$V2=[5,37],$V3=[9,23,64,65,73,76,77,85,87,101,102,104,108,109,111,112,113,116,117,120,121,123,124,125,126,128,129,131,133,135,139,140,141,142,143,144,145,146,147,148],$V4=[18,20,21,39],$V5=[1,19],$V6=[20,21,39],$V7=[15,18,20,21,39],$V8=[1,25],$V9=[1,38],$Va=[1,40],$Vb=[1,71],$Vc=[1,41],$Vd=[1,42],$Ve=[1,43],$Vf=[1,44],$Vg=[1,45],$Vh=[1,46],$Vi=[1,47],$Vj=[1,48],$Vk=[1,49],$Vl=[1,69],$Vm=[1,70],$Vn=[1,60],$Vo=[1,61],$Vp=[1,62],$Vq=[1,63],$Vr=[1,64],$Vs=[1,65],$Vt=[1,66],$Vu=[21,39],$Vv=[20,21,27,28,29,30,31,32,33,34,35,39],$Vw=[2,16],$Vx=[5,15,37,41,46,59,63,64,66,71,74,78,79,82,83,84,88,94,95,96,98,99,108,109,110,111,112,113,114],$Vy=[1,82],$Vz=[15,41,46,59,63,64,66,78,79,83,84,88,94,95,96,98,99,108,109,110,111,112,113,114],$VA=[15,41,46,59,63,64,66,78,79,82,83,84,88,94,95,96,98,99,108,109,110,111,112,113,114],$VB=[1,99],$VC=[1,100],$VD=[1,96],$VE=[1,102],$VF=[9,65,73,76,77,85,87,102],$VG=[9,65,73,76,77,85,87,102,111,112,113,116,117,120,121,123,124,125,126,128,129,131,133,135],$VH=[2,121],$VI=[9,23,65,73,76,77,85,87,102,111,112,113,116,117,120,121,123,124,125,126,128,129,131,133,135,139,140,141,142,143,144,145,146,147,148],$VJ=[9,65,73,76,77,85,87,102,135],$VK=[1,129],$VL=[9,15,23,64,65,73,76,77,85,87,98,99,101,102,104,108,109,110,111,112,113,114,116,117,120,121,123,124,125,126,128,129,131,133,135,139,140,141,142,143,144,145,146,147,148],$VM=[15,64,98,99,108,109,110,111,112,113,114],$VN=[9,65,73,76,77,85,87,102,133,135],$VO=[1,130],$VP=[9,65,73,76,77,85,87,102,131,133,135],$VQ=[1,132],$VR=[1,133],$VS=[9,65,73,76,77,85,87,102,128,129,131,133,135],$VT=[1,134],$VU=[1,135],$VV=[1,136],$VW=[1,137],$VX=[9,65,73,76,77,85,87,102,123,124,125,126,128,129,131,133,135],$VY=[1,138],$VZ=[1,139],$V_=[9,65,73,76,77,85,87,102,120,121,123,124,125,126,128,129,131,133,135],$V$=[1,140],$V01=[1,141],$V11=[9,65,73,76,77,85,87,102,112,113,120,121,123,124,125,126,128,129,131,133,135],$V21=[1,142],$V31=[1,143],$V41=[1,144],$V51=[1,150],$V61=[1,151],$V71=[1,152],$V81=[1,153],$V91=[1,154],$Va1=[1,155],$Vb1=[1,156],$Vc1=[1,157],$Vd1=[1,158],$Ve1=[9,15,41,46,59,63,64,66,78,79,82,83,84,88,94,95,96,98,99,108,109,110,111,112,113,114],$Vf1=[15,41,59,63,64,66,78,79,82,83,84,88,94,95,96,98,99,108,109,110,111,112,113,114],$Vg1=[9,15,64,98,99,108,109,110,111,112,113,114],$Vh1=[1,213],$Vi1=[9,65,76],$Vj1=[1,231],$Vk1=[1,229],$Vl1=[15,64,65,98,99,108,109,110,111,112,113,114],$Vm1=[15,41,59,63,64,66,78,79,83,84,88,94,95,96,98,99,108,109,110,111,112,113,114],$Vn1=[41,71,74],$Vo1=[15,41,59,61,62,63,64,66,78,79,83,84,88,94,95,96,98,99,108,109,110,111,112,113,114],$Vp1=[73,76];\nvar parser = {trace: function trace() { },\nyy: {},\nsymbols_: {\"error\":2,\"translation_unit\":3,\"program\":4,\"EOF\":5,\"process_list\":6,\"PROGRAM\":7,\"id\":8,\";\":9,\"const_block\":10,\"global_block\":11,\"local_block\":12,\"private_block\":13,\"body\":14,\"NAME\":15,\"CONST\":16,\"const_declaration_list\":17,\"GLOBAL\":18,\"declaration_list\":19,\"LOCAL\":20,\"PRIVATE\":21,\"const_declaration\":22,\"=\":23,\"expression\":24,\"declaration\":25,\"type\":26,\"INT_POINTER\":27,\"INT\":28,\"WORD_POINTER\":29,\"WORD\":30,\"BYTE_POINTER\":31,\"BYTE\":32,\"STRING_POINTER\":33,\"STRING\":34,\"STRUCT_POINTER\":35,\"process\":36,\"PROCESS\":37,\"private\":38,\"BEGIN\":39,\"group_of_sentences\":40,\"END\":41,\"sentence_list\":42,\"group_of_sentences_for_loops\":43,\"sentence_list_for_loops\":44,\"group_of_sentences_for_if_else\":45,\"ELSE\":46,\"sentence\":47,\"if_sentence\":48,\"switch_sentence\":49,\"while_sentence\":50,\"repeat_sentence\":51,\"opt_end\":52,\"loop_sentence\":53,\"from_sentence\":54,\"for_sentence\":55,\"return_sentence\":56,\"frame_sentence\":57,\"clone_sentence\":58,\"DEBUG\":59,\"sentence_for_loops\":60,\"BREAK\":61,\"CONTINUE\":62,\"IF\":63,\"(\":64,\")\":65,\"SWITCH\":66,\"group_of_cases\":67,\"default\":68,\"case_list\":69,\"case\":70,\"CASE\":71,\"list_of_ranges\":72,\":\":73,\"DEFAULT\":74,\"range\":75,\",\":76,\"..\":77,\"WHILE\":78,\"REPEAT\":79,\"group_of_sentences_for_repeat\":80,\"until_condition\":81,\"UNTIL\":82,\"LOOP\":83,\"FROM\":84,\"TO\":85,\"step\":86,\"STEP\":87,\"FOR\":88,\"for_params\":89,\"initialization\":90,\"condition\":91,\"increment\":92,\"expression_list\":93,\"RETURN\":94,\"FRAME\":95,\"CLONE\":96,\"primary_expression\":97,\"STRING_LITERAL\":98,\"NUMBER\":99,\"postfix_expression\":100,\"[\":101,\"]\":102,\"call_expression\":103,\".\":104,\"update_operator\":105,\"unary_expression\":106,\"unary_operator\":107,\"++\":108,\"--\":109,\"&\":110,\"*\":111,\"+\":112,\"-\":113,\"!\":114,\"multiplicative_expression\":115,\"/\":116,\"%\":117,\"additive_expression\":118,\"shift_expression\":119,\"<<\":120,\">>\":121,\"relational_expression\":122,\"<\":123,\">\":124,\"<=\":125,\">=\":126,\"equality_expression\":127,\"==\":128,\"!=\":129,\"and_expression\":130,\"&&\":131,\"exclusive_or_expression\":132,\"^\":133,\"inclusive_or_expression\":134,\"||\":135,\"conditional_expression\":136,\"assignment_expression\":137,\"assignment_operator\":138,\"*=\":139,\"/=\":140,\"%=\":141,\"+=\":142,\"-=\":143,\"<<=\":144,\">>=\":145,\"&=\":146,\"^=\":147,\"|=\":148,\"$accept\":0,\"$end\":1},\nterminals_: {2:\"error\",5:\"EOF\",7:\"PROGRAM\",9:\";\",15:\"NAME\",16:\"CONST\",18:\"GLOBAL\",20:\"LOCAL\",21:\"PRIVATE\",23:\"=\",27:\"INT_POINTER\",28:\"INT\",29:\"WORD_POINTER\",30:\"WORD\",31:\"BYTE_POINTER\",32:\"BYTE\",33:\"STRING_POINTER\",34:\"STRING\",35:\"STRUCT_POINTER\",37:\"PROCESS\",38:\"private\",39:\"BEGIN\",41:\"END\",46:\"ELSE\",59:\"DEBUG\",61:\"BREAK\",62:\"CONTINUE\",63:\"IF\",64:\"(\",65:\")\",66:\"SWITCH\",71:\"CASE\",73:\":\",74:\"DEFAULT\",76:\",\",77:\"..\",78:\"WHILE\",79:\"REPEAT\",82:\"UNTIL\",83:\"LOOP\",84:\"FROM\",85:\"TO\",87:\"STEP\",88:\"FOR\",94:\"RETURN\",95:\"FRAME\",96:\"CLONE\",98:\"STRING_LITERAL\",99:\"NUMBER\",101:\"[\",102:\"]\",104:\".\",108:\"++\",109:\"--\",110:\"&\",111:\"*\",112:\"+\",113:\"-\",114:\"!\",116:\"/\",117:\"%\",120:\"<<\",121:\">>\",123:\"<\",124:\">\",125:\"<=\",126:\">=\",128:\"==\",129:\"!=\",131:\"&&\",133:\"^\",135:\"||\",139:\"*=\",140:\"/=\",141:\"%=\",142:\"+=\",143:\"-=\",144:\"<<=\",145:\">>=\",146:\"&=\",147:\"^=\",148:\"|=\"},\nproductions_: [0,[3,2],[3,3],[4,8],[8,1],[10,2],[10,0],[11,2],[11,0],[12,2],[12,0],[13,2],[13,0],[17,0],[17,2],[22,4],[19,0],[19,2],[25,5],[25,3],[26,1],[26,1],[26,1],[26,1],[26,1],[26,1],[26,1],[26,1],[26,1],[6,1],[6,2],[36,5],[36,4],[14,2],[40,1],[40,2],[43,1],[43,2],[45,1],[45,2],[47,1],[47,1],[47,1],[47,2],[47,1],[47,1],[47,1],[47,2],[47,2],[47,1],[47,2],[47,2],[60,1],[60,2],[60,2],[52,0],[52,1],[48,5],[48,6],[49,5],[42,1],[42,2],[44,1],[44,2],[67,1],[67,2],[67,2],[67,3],[69,1],[69,2],[70,4],[68,3],[72,1],[72,3],[75,1],[75,3],[50,5],[51,2],[80,1],[80,2],[81,4],[53,2],[54,9],[86,0],[86,2],[55,3],[89,4],[90,1],[90,2],[91,1],[91,2],[92,1],[92,2],[56,1],[56,4],[57,1],[57,4],[58,2],[93,1],[93,3],[97,1],[97,1],[97,1],[97,3],[100,1],[100,4],[100,1],[100,3],[100,2],[103,3],[103,4],[106,1],[106,2],[106,2],[105,1],[105,1],[107,1],[107,1],[107,1],[107,1],[107,1],[115,1],[115,3],[115,3],[115,3],[118,1],[118,3],[118,3],[119,1],[119,3],[119,3],[122,1],[122,3],[122,3],[122,3],[122,3],[127,1],[127,3],[127,3],[130,1],[130,3],[132,1],[132,3],[134,1],[134,3],[136,1],[137,1],[137,3],[138,1],[138,1],[138,1],[138,1],[138,1],[138,1],[138,1],[138,1],[138,1],[138,1],[138,1],[24,1]],\nperformAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {\n/* this == yyval */\n\nvar $0 = $$.length - 1;\nswitch (yystate) {\ncase 1:\n \n      this.$ = {\n        type: \"Unit\",\n        program: $$[$0-1],\n        processes: []\n      };\n      return this.$;\n    \nbreak;\ncase 2:\n\n      this.$ = {\n        type: \"Unit\",\n        program: $$[$0-2],\n        processes: $$[$0-1]\n      };\n      return this.$;\n    \nbreak;\ncase 3:\n\n      this.$ = {\n        type: \"Program\",\n        name: $$[$0-6],\n        consts: $$[$0-4],\n        globals: $$[$0-3],\n        locals: $$[$0-2],\n        privates: $$[$0-1],\n        body: $$[$0]\n      };\n    \nbreak;\ncase 4:\n this.$ = { type: \"Identifier\", name: $$[$0] }; \nbreak;\ncase 5:\n\n      this.$ = {\n        type: \"ConstDeclarations\",\n        declarations: $$[$0]\n      };\n    \nbreak;\ncase 6: case 8: case 10: case 12:\n this.$ = null; \nbreak;\ncase 7:\n\n      this.$ = {\n        type: \"GlobalDeclarations\",\n        declarations: $$[$0]\n      };\n    \nbreak;\ncase 9:\n\n      this.$ = {\n        type: \"LocalDeclarations\",\n        declarations: $$[$0]\n      };\n    \nbreak;\ncase 11:\n\n      this.$ = {\n        type: \"PrivateDeclarations\",\n        declarations: $$[$0]\n      };\n    \nbreak;\ncase 13: case 16: case 34: case 36: case 38: case 64: case 87: case 89: case 91:\n this.$ = []; \nbreak;\ncase 14: case 17:\n this.$ = $$[$0-1].concat([$$[$0]]); \nbreak;\ncase 15:\n\n      // TODO: I think consts are actually MACROS\n      this.$ = {\n        type: \"ConstDeclarator\",\n        constType: \"int\",\n        constName: $$[$0-3],\n        constInit: $$[$0-1]\n      };\n    \nbreak;\ncase 18:\n\n      this.$ = {\n        type: \"VariableDeclarator\",\n        varType: $$[$0-4],\n        varName: $$[$0-3],\n        varInit: $$[$0-1]\n      };\n    \nbreak;\ncase 19:\n\n      this.$ = {\n        type: \"VariableDeclarator\",\n        varType: $$[$0-2],\n        varName: $$[$0-1],\n        varInit: null\n      };\n    \nbreak;\ncase 20:\n this.$ = \"int_pointer\"; \nbreak;\ncase 21:\n this.$ = \"int\"; \nbreak;\ncase 22:\n this.$ = \"word_pointer\"; \nbreak;\ncase 23:\n this.$ = \"word\"; \nbreak;\ncase 24:\n this.$ = \"byte_pointer\"; \nbreak;\ncase 25:\n this.$ = \"byte\"; \nbreak;\ncase 26:\n this.$ = \"string_pointer\"; \nbreak;\ncase 27:\n this.$ = \"string\"; \nbreak;\ncase 28:\n this.$ = \"struct_pointer\"; \nbreak;\ncase 33:\n\n      this.$ = {\n        type: \"ProcessBody\",\n        sentences: $$[$0]\n      };\n    \nbreak;\ncase 35: case 37: case 39: case 80: case 103:\n this.$ = $$[$0-1]; \nbreak;\ncase 50:\n this.$ = { type: \"DebuggerSentence\" }; \nbreak;\ncase 51:\n\n      this.$ = {\n        type: \"ExpressionSentence\",\n        expression: $$[$0-1]\n      };\n    \nbreak;\ncase 53:\n this.$ = { type: \"BreakSentence\" }; \nbreak;\ncase 54:\n this.$ = { type: \"ContinueSentence\" }; \nbreak;\ncase 57:\n\n      this.$ = {\n        type: \"IfSentence\",\n        test: $$[$0-2],\n        consequent: {\n          type: \"SentenceBlock\",\n          sentences: $$[$0]\n        },\n        alternate: null\n      };\n    \nbreak;\ncase 58:\n\n      this.$ = {\n        type: \"IfSentence\",\n        test: $$[$0-3],\n        consequent: {\n          type: \"SentenceBlock\",\n          sentences: $$[$0-1]\n        },\n        alternate: {\n          type: \"SentenceBlock\",\n          sentences: $$[$0]\n        },\n      };\n    \nbreak;\ncase 59:\n\n      this.$ = {\n        type: \"SwitchSentence\",\n        discriminant: $$[$0-2],\n        cases: $$[$0]\n      };\n    \nbreak;\ncase 60: case 62: case 68: case 72: case 98:\n this.$ = [$$[$0]]; \nbreak;\ncase 61: case 63: case 69:\n $$[$0-1].push($$[$0]); \nbreak;\ncase 65:\n this.$ = [$$[$0-1]]; \nbreak;\ncase 67:\n $$[$0-2].push($$[$0-1]); \nbreak;\ncase 70:\n\n      this.$ = {\n        type: \"SwitchCase\",\n        tests: $$[$0-2],\n        consequent: {\n          type: \"SentenceBlock\",\n          sentences: $$[$0]\n        }\n      };\n    \nbreak;\ncase 71:\n\n      this.$ = {\n        type: \"SwitchCase\",\n        tests: null,\n        consequent: {\n          type: \"SentenceBlock\",\n          sentences: $$[$0]\n        }\n      };\n    \nbreak;\ncase 73: case 99:\n $$[$0-2].push($$[$0]); \nbreak;\ncase 75:\n\n      this.$ = {\n        type: \"Range\",\n        min: $$[$0-2],\n        max: $$[$0]\n      };\n    \nbreak;\ncase 76:\n\n      this.$ = {\n        type: \"WhileSentence\",\n        test: $$[$0-2],\n        body: {\n          type: \"SentenceBlock\",\n          sentences: $$[$0]\n        }\n      };\n    \nbreak;\ncase 77:\n\n      this.$ = {\n        type: \"RepeatSentence\",\n        test: $$[$0].test,\n        body: {\n          type: \"SentenceBlock\",\n          sentences: $$[$0].body\n        }\n      };\n    \nbreak;\ncase 78:\n\n      this.$ = {\n        test: $$[$0],\n        body: []\n      };\n    \nbreak;\ncase 79:\n\n      this.$ = {\n        test: $$[$0],\n        body: $$[$0-1]\n      };\n    \nbreak;\ncase 81:\n\n      this.$ = {\n        type: \"LoopSentence\",\n        body: {\n          type: \"SentenceBlock\",\n          sentences: []\n        }\n      };\n    \nbreak;\ncase 82:\n\n      this.$ = {\n        type: \"FromSentence\",\n        identifier: $$[$0-7],\n        init: $$[$0-5],\n        limit: $$[$0-3],\n        step: $$[$0-2],\n        body: {\n          type: \"SentenceBlock\",\n          sentences: $$[$0]\n        }\n      };\n    \nbreak;\ncase 83:\n this.$ = null \nbreak;\ncase 84:\n this.$ = $$[$0]; \nbreak;\ncase 85:\n\n      this.$ = {\n        type: \"ForSentence\",\n        inits: $$[$0-1].inits,\n        tests: $$[$0-1].tests,\n        updates: $$[$0-1].updates,\n        body: {\n          type: \"SentenceBlock\",\n          sentences: $$[$0]\n        }\n      };\n    \nbreak;\ncase 86:\n\n      this.$ = {\n        inits: $$[$0-2],\n        tests: $$[$0-1],\n        updates: $$[$0]\n      };\n    \nbreak;\ncase 93:\n\n      this.$ = {\n        type: \"ReturnSentence\",\n        argument: {\n          type: \"Literal\",\n          value: 100,\n          raw: \"100\"\n        }\n      };\n    \nbreak;\ncase 94:\n\n      this.$ = {\n        type: \"ReturnSentence\",\n        argument: $$[$0-1]\n      };\n    \nbreak;\ncase 95:\n\n      this.$ = {\n        type: \"FrameSentence\",\n        argument: {\n          type: \"Literal\",\n          value: 100,\n          raw: \"100\"\n        }\n      };\n    \nbreak;\ncase 96:\n\n      this.$ = {\n        type: \"FrameSentence\",\n        argument: $$[$0-1]\n      };\n    \nbreak;\ncase 101:\n\n      this.$ = {\n        type: \"Literal\",\n        value: JSON.parse($$[$0]),\n        raw: $$[$0]\n      };\n    \nbreak;\ncase 102:\n\n      this.$ = {\n        type: \"Literal\",\n        value: parseInt($$[$0]),\n        raw: $$[$0]\n      };\n    \nbreak;\ncase 108:\n\n      this.$ = {\n        type: \"UpdateSentence\",\n        operator: $$[$0],\n        argument: $$[$0-1],\n        prefix: false\n      };\n    \nbreak;\ncase 109:\n\n      this.$ = {\n        type: \"CallExpression\",\n        callee: $$[$0-2],\n        arguments: []\n      };\n    \nbreak;\ncase 110:\n\n      this.$ = {\n        type: \"CallExpression\",\n        callee: $$[$0-3],\n        arguments: $$[$0-1]\n      };\n    \nbreak;\ncase 112:\n\n      this.$ = {\n        type: \"UpdateExpression\",\n        operator: $$[$0],\n        argument: $$[$0-1],\n        prefix: true\n      };\n    \nbreak;\ncase 147:\n\n      this.$ = {\n        type: \"AssignmentExpression\",\n        operator: $$[$0-1],\n        left: $$[$0-2],\n        right: $$[$0]\n      };\n    \nbreak;\n}\n},\ntable: [{3:1,4:2,7:[1,3]},{1:[3]},{5:[1,4],6:5,36:6,37:$V0},{8:8,15:$V1},{1:[2,1]},{5:[1,10],36:11,37:$V0},o($V2,[2,29]),{8:12,15:$V1},{9:[1,13]},o($V3,[2,4]),{1:[2,2]},o($V2,[2,30]),{9:[1,14]},o($V4,[2,6],{10:15,16:[1,16]}),{14:18,38:[1,17],39:$V5},o($V6,[2,8],{11:20,18:[1,21]}),o($V7,[2,13],{17:22}),{14:23,39:$V5},o($V2,[2,32]),{8:68,15:$V1,24:39,40:24,41:$V8,42:26,47:27,48:28,49:29,50:30,51:31,53:32,54:33,55:34,56:35,57:36,58:37,59:$V9,63:$Va,64:$Vb,66:$Vc,78:$Vd,79:$Ve,83:$Vf,84:$Vg,88:$Vh,94:$Vi,95:$Vj,96:$Vk,97:58,98:$Vl,99:$Vm,100:54,103:59,105:55,106:52,107:56,108:$Vn,109:$Vo,110:$Vp,111:$Vq,112:$Vr,113:$Vs,114:$Vt,115:76,118:75,119:74,122:73,127:72,130:67,132:57,134:53,136:51,137:50},o($Vu,[2,10],{12:77,20:[1,78]}),o($Vv,$Vw,{19:79}),o($V4,[2,5],{22:80,8:81,15:$V1}),o($V2,[2,31]),o($V2,[2,33]),o($Vx,[2,34]),{8:68,15:$V1,24:39,41:$Vy,47:83,48:28,49:29,50:30,51:31,53:32,54:33,55:34,56:35,57:36,58:37,59:$V9,63:$Va,64:$Vb,66:$Vc,78:$Vd,79:$Ve,83:$Vf,84:$Vg,88:$Vh,94:$Vi,95:$Vj,96:$Vk,97:58,98:$Vl,99:$Vm,100:54,103:59,105:55,106:52,107:56,108:$Vn,109:$Vo,110:$Vp,111:$Vq,112:$Vr,113:$Vs,114:$Vt,115:76,118:75,119:74,122:73,127:72,130:67,132:57,134:53,136:51,137:50},o($Vz,[2,60]),o($VA,[2,40]),o($VA,[2,41]),o($VA,[2,42]),o($VA,[2,55],{52:84,9:[1,85]}),o($VA,[2,44]),o($VA,[2,45]),o($VA,[2,46]),{9:[1,86]},{9:[1,87]},o($VA,[2,49]),{9:[1,88]},{9:[1,89]},{64:[1,90]},{64:[1,91]},{64:[1,92]},{8:68,15:$V1,24:39,44:95,47:98,48:28,49:29,50:30,51:31,53:32,54:33,55:34,56:35,57:36,58:37,59:$V9,60:97,61:$VB,62:$VC,63:$Va,64:$Vb,66:$Vc,78:$Vd,79:$Ve,80:93,81:94,82:$VD,83:$Vf,84:$Vg,88:$Vh,94:$Vi,95:$Vj,96:$Vk,97:58,98:$Vl,99:$Vm,100:54,103:59,105:55,106:52,107:56,108:$Vn,109:$Vo,110:$Vp,111:$Vq,112:$Vr,113:$Vs,114:$Vt,115:76,118:75,119:74,122:73,127:72,130:67,132:57,134:53,136:51,137:50},{8:68,15:$V1,24:39,41:$VE,43:101,44:103,47:98,48:28,49:29,50:30,51:31,53:32,54:33,55:34,56:35,57:36,58:37,59:$V9,60:97,61:$VB,62:$VC,63:$Va,64:$Vb,66:$Vc,78:$Vd,79:$Ve,83:$Vf,84:$Vg,88:$Vh,94:$Vi,95:$Vj,96:$Vk,97:58,98:$Vl,99:$Vm,100:54,103:59,105:55,106:52,107:56,108:$Vn,109:$Vo,110:$Vp,111:$Vq,112:$Vr,113:$Vs,114:$Vt,115:76,118:75,119:74,122:73,127:72,130:67,132:57,134:53,136:51,137:50},{8:104,15:$V1},{64:[1,106],89:105},{9:[2,93],64:[1,107]},{9:[2,95],64:[1,108]},{8:68,15:$V1,24:39,40:109,41:$V8,42:26,47:27,48:28,49:29,50:30,51:31,53:32,54:33,55:34,56:35,57:36,58:37,59:$V9,63:$Va,64:$Vb,66:$Vc,78:$Vd,79:$Ve,83:$Vf,84:$Vg,88:$Vh,94:$Vi,95:$Vj,96:$Vk,97:58,98:$Vl,99:$Vm,100:54,103:59,105:55,106:52,107:56,108:$Vn,109:$Vo,110:$Vp,111:$Vq,112:$Vr,113:$Vs,114:$Vt,115:76,118:75,119:74,122:73,127:72,130:67,132:57,134:53,136:51,137:50},o($VF,[2,159]),o($VF,[2,146]),o($VG,$VH,{138:110,23:[1,111],139:[1,112],140:[1,113],141:[1,114],142:[1,115],143:[1,116],144:[1,117],145:[1,118],146:[1,119],147:[1,120],148:[1,121]}),o($VF,[2,145],{135:[1,122]}),o($VI,[2,111],{105:125,64:[1,126],101:[1,123],104:[1,124],108:$Vn,109:$Vo}),{8:68,15:$V1,64:$Vb,97:58,98:$Vl,99:$Vm,100:54,103:59,105:55,106:127,107:56,108:$Vn,109:$Vo,110:$Vp,111:$Vq,112:$Vr,113:$Vs,114:$Vt},{8:68,15:$V1,64:$Vb,97:58,98:$Vl,99:$Vm,100:54,103:59,105:55,106:128,107:56,108:$Vn,109:$Vo,110:$Vp,111:$Vq,112:$Vr,113:$Vs,114:$Vt},o($VJ,[2,143],{133:$VK}),o($V3,[2,104]),o($V3,[2,106]),o($VL,[2,114]),o($VL,[2,115]),o($VM,[2,116]),o($VM,[2,117]),o($VM,[2,118]),o($VM,[2,119]),o($VM,[2,120]),o($VN,[2,141],{131:$VO}),o($V3,[2,100]),o($V3,[2,101]),o($V3,[2,102]),{8:68,15:$V1,24:131,64:$Vb,97:58,98:$Vl,99:$Vm,100:54,103:59,105:55,106:52,107:56,108:$Vn,109:$Vo,110:$Vp,111:$Vq,112:$Vr,113:$Vs,114:$Vt,115:76,118:75,119:74,122:73,127:72,130:67,132:57,134:53,136:51,137:50},o($VP,[2,139],{128:$VQ,129:$VR}),o($VS,[2,136],{123:$VT,124:$VU,125:$VV,126:$VW}),o($VX,[2,131],{120:$VY,121:$VZ}),o($V_,[2,128],{112:$V$,113:$V01}),o($V11,[2,125],{111:$V21,116:$V31,117:$V41}),{13:145,21:[1,146],39:[2,12]},o([21,27,28,29,30,31,32,33,34,35,39],$Vw,{19:147}),o($V6,[2,7],{25:148,26:149,27:$V51,28:$V61,29:$V71,30:$V81,31:$V91,32:$Va1,33:$Vb1,34:$Vc1,35:$Vd1}),o($V7,[2,14]),{23:[1,159]},o($Vx,[2,35]),o($Vz,[2,61]),o($VA,[2,43]),o($VA,[2,56]),o($VA,[2,47]),o($VA,[2,48]),o($VA,[2,50]),o($VA,[2,51]),{8:68,15:$V1,24:160,64:$Vb,97:58,98:$Vl,99:$Vm,100:54,103:59,105:55,106:52,107:56,108:$Vn,109:$Vo,110:$Vp,111:$Vq,112:$Vr,113:$Vs,114:$Vt,115:76,118:75,119:74,122:73,127:72,130:67,132:57,134:53,136:51,137:50},{8:68,15:$V1,24:161,64:$Vb,97:58,98:$Vl,99:$Vm,100:54,103:59,105:55,106:52,107:56,108:$Vn,109:$Vo,110:$Vp,111:$Vq,112:$Vr,113:$Vs,114:$Vt,115:76,118:75,119:74,122:73,127:72,130:67,132:57,134:53,136:51,137:50},{8:68,15:$V1,24:162,64:$Vb,97:58,98:$Vl,99:$Vm,100:54,103:59,105:55,106:52,107:56,108:$Vn,109:$Vo,110:$Vp,111:$Vq,112:$Vr,113:$Vs,114:$Vt,115:76,118:75,119:74,122:73,127:72,130:67,132:57,134:53,136:51,137:50},o($Ve1,[2,77]),o($Ve1,[2,78]),{8:68,15:$V1,24:39,47:164,48:28,49:29,50:30,51:31,53:32,54:33,55:34,56:35,57:36,58:37,59:$V9,63:$Va,64:$Vb,66:$Vc,78:$Vd,79:$Ve,81:163,82:$VD,83:$Vf,84:$Vg,88:$Vh,94:$Vi,95:$Vj,96:$Vk,97:58,98:$Vl,99:$Vm,100:54,103:59,105:55,106:52,107:56,108:$Vn,109:$Vo,110:$Vp,111:$Vq,112:$Vr,113:$Vs,114:$Vt,115:76,118:75,119:74,122:73,127:72,130:67,132:57,134:53,136:51,137:50},{64:[1,165]},o($Vf1,[2,62]),o($Vf1,[2,52]),{9:[1,166]},{9:[1,167]},o($VA,[2,81]),o($VA,[2,36]),{8:68,15:$V1,24:39,41:[1,168],47:164,48:28,49:29,50:30,51:31,53:32,54:33,55:34,56:35,57:36,58:37,59:$V9,63:$Va,64:$Vb,66:$Vc,78:$Vd,79:$Ve,83:$Vf,84:$Vg,88:$Vh,94:$Vi,95:$Vj,96:$Vk,97:58,98:$Vl,99:$Vm,100:54,103:59,105:55,106:52,107:56,108:$Vn,109:$Vo,110:$Vp,111:$Vq,112:$Vr,113:$Vs,114:$Vt,115:76,118:75,119:74,122:73,127:72,130:67,132:57,134:53,136:51,137:50},{23:[1,169]},{8:68,15:$V1,24:39,41:$VE,43:170,44:103,47:98,48:28,49:29,50:30,51:31,53:32,54:33,55:34,56:35,57:36,58:37,59:$V9,60:97,61:$VB,62:$VC,63:$Va,64:$Vb,66:$Vc,78:$Vd,79:$Ve,83:$Vf,84:$Vg,88:$Vh,94:$Vi,95:$Vj,96:$Vk,97:58,98:$Vl,99:$Vm,100:54,103:59,105:55,106:52,107:56,108:$Vn,109:$Vo,110:$Vp,111:$Vq,112:$Vr,113:$Vs,114:$Vt,115:76,118:75,119:74,122:73,127:72,130:67,132:57,134:53,136:51,137:50},{8:68,9:[1,172],15:$V1,24:174,64:$Vb,90:171,93:173,97:58,98:$Vl,99:$Vm,100:54,103:59,105:55,106:52,107:56,108:$Vn,109:$Vo,110:$Vp,111:$Vq,112:$Vr,113:$Vs,114:$Vt,115:76,118:75,119:74,122:73,127:72,130:67,132:57,134:53,136:51,137:50},{8:68,15:$V1,24:175,64:$Vb,97:58,98:$Vl,99:$Vm,100:54,103:59,105:55,106:52,107:56,108:$Vn,109:$Vo,110:$Vp,111:$Vq,112:$Vr,113:$Vs,114:$Vt,115:76,118:75,119:74,122:73,127:72,130:67,132:57,134:53,136:51,137:50},{8:68,15:$V1,24:176,64:$Vb,97:58,98:$Vl,99:$Vm,100:54,103:59,105:55,106:52,107:56,108:$Vn,109:$Vo,110:$Vp,111:$Vq,112:$Vr,113:$Vs,114:$Vt,115:76,118:75,119:74,122:73,127:72,130:67,132:57,134:53,136:51,137:50},o($VA,[2,97]),{8:68,15:$V1,64:$Vb,97:58,98:$Vl,99:$Vm,100:54,103:59,105:55,106:52,107:56,108:$Vn,109:$Vo,110:$Vp,111:$Vq,112:$Vr,113:$Vs,114:$Vt,115:76,118:75,119:74,122:73,127:72,130:67,132:57,134:53,136:51,137:177},o($VM,[2,148]),o($VM,[2,149]),o($VM,[2,150]),o($VM,[2,151]),o($VM,[2,152]),o($VM,[2,153]),o($VM,[2,154]),o($VM,[2,155]),o($VM,[2,156]),o($VM,[2,157]),o($VM,[2,158]),{8:68,15:$V1,64:$Vb,97:58,98:$Vl,99:$Vm,100:54,103:59,105:55,106:179,107:56,108:$Vn,109:$Vo,110:$Vp,111:$Vq,112:$Vr,113:$Vs,114:$Vt,115:76,118:75,119:74,122:73,127:72,130:67,132:178},{8:68,15:$V1,24:180,64:$Vb,97:58,98:$Vl,99:$Vm,100:54,103:59,105:55,106:52,107:56,108:$Vn,109:$Vo,110:$Vp,111:$Vq,112:$Vr,113:$Vs,114:$Vt,115:76,118:75,119:74,122:73,127:72,130:67,132:57,134:53,136:51,137:50},{8:181,15:$V1},o($V3,[2,108]),{8:68,15:$V1,24:174,64:$Vb,65:[1,182],93:183,97:58,98:$Vl,99:$Vm,100:54,103:59,105:55,106:52,107:56,108:$Vn,109:$Vo,110:$Vp,111:$Vq,112:$Vr,113:$Vs,114:$Vt,115:76,118:75,119:74,122:73,127:72,130:67,132:57,134:53,136:51,137:50},o($VI,[2,112]),o($VI,[2,113]),{8:68,15:$V1,64:$Vb,97:58,98:$Vl,99:$Vm,100:54,103:59,105:55,106:179,107:56,108:$Vn,109:$Vo,110:$Vp,111:$Vq,112:$Vr,113:$Vs,114:$Vt,115:76,118:75,119:74,122:73,127:72,130:184},{8:68,15:$V1,64:$Vb,97:58,98:$Vl,99:$Vm,100:54,103:59,105:55,106:179,107:56,108:$Vn,109:$Vo,110:$Vp,111:$Vq,112:$Vr,113:$Vs,114:$Vt,115:76,118:75,119:74,122:73,127:185},{65:[1,186]},{8:68,15:$V1,64:$Vb,97:58,98:$Vl,99:$Vm,100:54,103:59,105:55,106:179,107:56,108:$Vn,109:$Vo,110:$Vp,111:$Vq,112:$Vr,113:$Vs,114:$Vt,115:76,118:75,119:74,122:187},{8:68,15:$V1,64:$Vb,97:58,98:$Vl,99:$Vm,100:54,103:59,105:55,106:179,107:56,108:$Vn,109:$Vo,110:$Vp,111:$Vq,112:$Vr,113:$Vs,114:$Vt,115:76,118:75,119:74,122:188},{8:68,15:$V1,64:$Vb,97:58,98:$Vl,99:$Vm,100:54,103:59,105:55,106:179,107:56,108:$Vn,109:$Vo,110:$Vp,111:$Vq,112:$Vr,113:$Vs,114:$Vt,115:76,118:75,119:189},{8:68,15:$V1,64:$Vb,97:58,98:$Vl,99:$Vm,100:54,103:59,105:55,106:179,107:56,108:$Vn,109:$Vo,110:$Vp,111:$Vq,112:$Vr,113:$Vs,114:$Vt,115:76,118:75,119:190},{8:68,15:$V1,64:$Vb,97:58,98:$Vl,99:$Vm,100:54,103:59,105:55,106:179,107:56,108:$Vn,109:$Vo,110:$Vp,111:$Vq,112:$Vr,113:$Vs,114:$Vt,115:76,118:75,119:191},{8:68,15:$V1,64:$Vb,97:58,98:$Vl,99:$Vm,100:54,103:59,105:55,106:179,107:56,108:$Vn,109:$Vo,110:$Vp,111:$Vq,112:$Vr,113:$Vs,114:$Vt,115:76,118:75,119:192},{8:68,15:$V1,64:$Vb,97:58,98:$Vl,99:$Vm,100:54,103:59,105:55,106:179,107:56,108:$Vn,109:$Vo,110:$Vp,111:$Vq,112:$Vr,113:$Vs,114:$Vt,115:76,118:193},{8:68,15:$V1,64:$Vb,97:58,98:$Vl,99:$Vm,100:54,103:59,105:55,106:179,107:56,108:$Vn,109:$Vo,110:$Vp,111:$Vq,112:$Vr,113:$Vs,114:$Vt,115:76,118:194},{8:68,15:$V1,64:$Vb,97:58,98:$Vl,99:$Vm,100:54,103:59,105:55,106:179,107:56,108:$Vn,109:$Vo,110:$Vp,111:$Vq,112:$Vr,113:$Vs,114:$Vt,115:195},{8:68,15:$V1,64:$Vb,97:58,98:$Vl,99:$Vm,100:54,103:59,105:55,106:179,107:56,108:$Vn,109:$Vo,110:$Vp,111:$Vq,112:$Vr,113:$Vs,114:$Vt,115:196},{8:68,15:$V1,64:$Vb,97:58,98:$Vl,99:$Vm,100:54,103:59,105:55,106:197,107:56,108:$Vn,109:$Vo,110:$Vp,111:$Vq,112:$Vr,113:$Vs,114:$Vt},{8:68,15:$V1,64:$Vb,97:58,98:$Vl,99:$Vm,100:54,103:59,105:55,106:198,107:56,108:$Vn,109:$Vo,110:$Vp,111:$Vq,112:$Vr,113:$Vs,114:$Vt},{8:68,15:$V1,64:$Vb,97:58,98:$Vl,99:$Vm,100:54,103:59,105:55,106:199,107:56,108:$Vn,109:$Vo,110:$Vp,111:$Vq,112:$Vr,113:$Vs,114:$Vt},{14:200,39:$V5},o([27,28,29,30,31,32,33,34,35,39],$Vw,{19:201}),o($Vu,[2,9],{25:148,26:149,27:$V51,28:$V61,29:$V71,30:$V81,31:$V91,32:$Va1,33:$Vb1,34:$Vc1,35:$Vd1}),o($Vv,[2,17]),{8:202,15:$V1},{15:[2,20]},{15:[2,21]},{15:[2,22]},{15:[2,23]},{15:[2,24]},{15:[2,25]},{15:[2,26]},{15:[2,27]},{15:[2,28]},{8:68,15:$V1,24:203,64:$Vb,97:58,98:$Vl,99:$Vm,100:54,103:59,105:55,106:52,107:56,108:$Vn,109:$Vo,110:$Vp,111:$Vq,112:$Vr,113:$Vs,114:$Vt,115:76,118:75,119:74,122:73,127:72,130:67,132:57,134:53,136:51,137:50},{65:[1,204]},{65:[1,205]},{65:[1,206]},o($Ve1,[2,79]),o($Vf1,[2,63]),{8:68,15:$V1,24:207,64:$Vb,97:58,98:$Vl,99:$Vm,100:54,103:59,105:55,106:52,107:56,108:$Vn,109:$Vo,110:$Vp,111:$Vq,112:$Vr,113:$Vs,114:$Vt,115:76,118:75,119:74,122:73,127:72,130:67,132:57,134:53,136:51,137:50},o($Vf1,[2,53]),o($Vf1,[2,54]),o($VA,[2,37]),{8:68,15:$V1,24:208,64:$Vb,97:58,98:$Vl,99:$Vm,100:54,103:59,105:55,106:52,107:56,108:$Vn,109:$Vo,110:$Vp,111:$Vq,112:$Vr,113:$Vs,114:$Vt,115:76,118:75,119:74,122:73,127:72,130:67,132:57,134:53,136:51,137:50},o($VA,[2,85]),{8:68,9:[1,210],15:$V1,24:174,64:$Vb,91:209,93:211,97:58,98:$Vl,99:$Vm,100:54,103:59,105:55,106:52,107:56,108:$Vn,109:$Vo,110:$Vp,111:$Vq,112:$Vr,113:$Vs,114:$Vt,115:76,118:75,119:74,122:73,127:72,130:67,132:57,134:53,136:51,137:50},o($Vg1,[2,87]),{9:[1,212],76:$Vh1},o($Vi1,[2,98]),{65:[1,214]},{65:[1,215]},o($VF,[2,147]),o($VJ,[2,144],{133:$VK}),o($VG,$VH),{102:[1,216]},o($V3,[2,107]),o($V3,[2,109]),{65:[1,217],76:$Vh1},o($VN,[2,142],{131:$VO}),o($VP,[2,140],{128:$VQ,129:$VR}),o($V3,[2,103]),o($VS,[2,137],{123:$VT,124:$VU,125:$VV,126:$VW}),o($VS,[2,138],{123:$VT,124:$VU,125:$VV,126:$VW}),o($VX,[2,132],{120:$VY,121:$VZ}),o($VX,[2,133],{120:$VY,121:$VZ}),o($VX,[2,134],{120:$VY,121:$VZ}),o($VX,[2,135],{120:$VY,121:$VZ}),o($V_,[2,129],{112:$V$,113:$V01}),o($V_,[2,130],{112:$V$,113:$V01}),o($V11,[2,126],{111:$V21,116:$V31,117:$V41}),o($V11,[2,127],{111:$V21,116:$V31,117:$V41}),o($VG,[2,122]),o($VG,[2,123]),o($VG,[2,124]),o($V2,[2,3]),{25:148,26:149,27:$V51,28:$V61,29:$V71,30:$V81,31:$V91,32:$Va1,33:$Vb1,34:$Vc1,35:$Vd1,39:[2,11]},{9:[1,219],23:[1,218]},{9:[1,220]},{8:68,15:$V1,24:39,40:221,41:$V8,42:223,45:222,46:[1,224],47:27,48:28,49:29,50:30,51:31,53:32,54:33,55:34,56:35,57:36,58:37,59:$V9,63:$Va,64:$Vb,66:$Vc,78:$Vd,79:$Ve,83:$Vf,84:$Vg,88:$Vh,94:$Vi,95:$Vj,96:$Vk,97:58,98:$Vl,99:$Vm,100:54,103:59,105:55,106:52,107:56,108:$Vn,109:$Vo,110:$Vp,111:$Vq,112:$Vr,113:$Vs,114:$Vt,115:76,118:75,119:74,122:73,127:72,130:67,132:57,134:53,136:51,137:50},{41:[1,226],67:225,68:227,69:228,70:230,71:$Vj1,74:$Vk1},{8:68,15:$V1,24:39,41:$VE,43:232,44:103,47:98,48:28,49:29,50:30,51:31,53:32,54:33,55:34,56:35,57:36,58:37,59:$V9,60:97,61:$VB,62:$VC,63:$Va,64:$Vb,66:$Vc,78:$Vd,79:$Ve,83:$Vf,84:$Vg,88:$Vh,94:$Vi,95:$Vj,96:$Vk,97:58,98:$Vl,99:$Vm,100:54,103:59,105:55,106:52,107:56,108:$Vn,109:$Vo,110:$Vp,111:$Vq,112:$Vr,113:$Vs,114:$Vt,115:76,118:75,119:74,122:73,127:72,130:67,132:57,134:53,136:51,137:50},{65:[1,233]},{85:[1,234]},{8:68,15:$V1,24:174,64:$Vb,65:[1,236],92:235,93:237,97:58,98:$Vl,99:$Vm,100:54,103:59,105:55,106:52,107:56,108:$Vn,109:$Vo,110:$Vp,111:$Vq,112:$Vr,113:$Vs,114:$Vt,115:76,118:75,119:74,122:73,127:72,130:67,132:57,134:53,136:51,137:50},o($Vl1,[2,89]),{9:[1,238],76:$Vh1},o($Vg1,[2,88]),{8:68,15:$V1,24:239,64:$Vb,97:58,98:$Vl,99:$Vm,100:54,103:59,105:55,106:52,107:56,108:$Vn,109:$Vo,110:$Vp,111:$Vq,112:$Vr,113:$Vs,114:$Vt,115:76,118:75,119:74,122:73,127:72,130:67,132:57,134:53,136:51,137:50},{9:[2,94]},{9:[2,96]},o($V3,[2,105]),o($V3,[2,110]),{8:68,15:$V1,24:240,64:$Vb,97:58,98:$Vl,99:$Vm,100:54,103:59,105:55,106:52,107:56,108:$Vn,109:$Vo,110:$Vp,111:$Vq,112:$Vr,113:$Vs,114:$Vt,115:76,118:75,119:74,122:73,127:72,130:67,132:57,134:53,136:51,137:50},o($Vv,[2,19]),o($V7,[2,15]),o($VA,[2,57]),{8:68,15:$V1,24:39,40:241,41:$V8,42:26,47:27,48:28,49:29,50:30,51:31,53:32,54:33,55:34,56:35,57:36,58:37,59:$V9,63:$Va,64:$Vb,66:$Vc,78:$Vd,79:$Ve,83:$Vf,84:$Vg,88:$Vh,94:$Vi,95:$Vj,96:$Vk,97:58,98:$Vl,99:$Vm,100:54,103:59,105:55,106:52,107:56,108:$Vn,109:$Vo,110:$Vp,111:$Vq,112:$Vr,113:$Vs,114:$Vt,115:76,118:75,119:74,122:73,127:72,130:67,132:57,134:53,136:51,137:50},{8:68,15:$V1,24:39,41:$Vy,46:[1,242],47:83,48:28,49:29,50:30,51:31,53:32,54:33,55:34,56:35,57:36,58:37,59:$V9,63:$Va,64:$Vb,66:$Vc,78:$Vd,79:$Ve,83:$Vf,84:$Vg,88:$Vh,94:$Vi,95:$Vj,96:$Vk,97:58,98:$Vl,99:$Vm,100:54,103:59,105:55,106:52,107:56,108:$Vn,109:$Vo,110:$Vp,111:$Vq,112:$Vr,113:$Vs,114:$Vt,115:76,118:75,119:74,122:73,127:72,130:67,132:57,134:53,136:51,137:50},o($Vm1,[2,38]),o($VA,[2,59]),o($VA,[2,64]),{41:[1,243]},{41:[1,244],68:245,70:246,71:$Vj1,74:$Vk1},{73:[1,247]},o($Vn1,[2,68]),{8:68,15:$V1,24:250,64:$Vb,72:248,75:249,97:58,98:$Vl,99:$Vm,100:54,103:59,105:55,106:52,107:56,108:$Vn,109:$Vo,110:$Vp,111:$Vq,112:$Vr,113:$Vs,114:$Vt,115:76,118:75,119:74,122:73,127:72,130:67,132:57,134:53,136:51,137:50},o($VA,[2,76]),o($Ve1,[2,80]),{8:68,15:$V1,24:251,64:$Vb,97:58,98:$Vl,99:$Vm,100:54,103:59,105:55,106:52,107:56,108:$Vn,109:$Vo,110:$Vp,111:$Vq,112:$Vr,113:$Vs,114:$Vt,115:76,118:75,119:74,122:73,127:72,130:67,132:57,134:53,136:51,137:50},o($Vo1,[2,86]),o($Vo1,[2,91]),{65:[1,252],76:$Vh1},o($Vl1,[2,90]),o($Vi1,[2,99]),{9:[1,253]},o($VA,[2,58]),o($Vm1,[2,39]),o($VA,[2,65]),o($VA,[2,66]),{41:[1,254]},o($Vn1,[2,69]),{8:68,15:$V1,24:39,40:255,41:$V8,42:26,47:27,48:28,49:29,50:30,51:31,53:32,54:33,55:34,56:35,57:36,58:37,59:$V9,63:$Va,64:$Vb,66:$Vc,78:$Vd,79:$Ve,83:$Vf,84:$Vg,88:$Vh,94:$Vi,95:$Vj,96:$Vk,97:58,98:$Vl,99:$Vm,100:54,103:59,105:55,106:52,107:56,108:$Vn,109:$Vo,110:$Vp,111:$Vq,112:$Vr,113:$Vs,114:$Vt,115:76,118:75,119:74,122:73,127:72,130:67,132:57,134:53,136:51,137:50},{73:[1,256],76:[1,257]},o($Vp1,[2,72]),o($Vp1,[2,74],{77:[1,258]}),{9:[2,83],86:259,87:[1,260]},o($Vo1,[2,92]),o($Vv,[2,18]),o($VA,[2,67]),{41:[2,71]},{8:68,15:$V1,24:39,40:261,41:$V8,42:26,47:27,48:28,49:29,50:30,51:31,53:32,54:33,55:34,56:35,57:36,58:37,59:$V9,63:$Va,64:$Vb,66:$Vc,78:$Vd,79:$Ve,83:$Vf,84:$Vg,88:$Vh,94:$Vi,95:$Vj,96:$Vk,97:58,98:$Vl,99:$Vm,100:54,103:59,105:55,106:52,107:56,108:$Vn,109:$Vo,110:$Vp,111:$Vq,112:$Vr,113:$Vs,114:$Vt,115:76,118:75,119:74,122:73,127:72,130:67,132:57,134:53,136:51,137:50},{8:68,15:$V1,24:250,64:$Vb,75:262,97:58,98:$Vl,99:$Vm,100:54,103:59,105:55,106:52,107:56,108:$Vn,109:$Vo,110:$Vp,111:$Vq,112:$Vr,113:$Vs,114:$Vt,115:76,118:75,119:74,122:73,127:72,130:67,132:57,134:53,136:51,137:50},{8:68,15:$V1,24:263,64:$Vb,97:58,98:$Vl,99:$Vm,100:54,103:59,105:55,106:52,107:56,108:$Vn,109:$Vo,110:$Vp,111:$Vq,112:$Vr,113:$Vs,114:$Vt,115:76,118:75,119:74,122:73,127:72,130:67,132:57,134:53,136:51,137:50},{9:[1,264]},{8:68,15:$V1,24:265,64:$Vb,97:58,98:$Vl,99:$Vm,100:54,103:59,105:55,106:52,107:56,108:$Vn,109:$Vo,110:$Vp,111:$Vq,112:$Vr,113:$Vs,114:$Vt,115:76,118:75,119:74,122:73,127:72,130:67,132:57,134:53,136:51,137:50},o($Vn1,[2,70]),o($Vp1,[2,73]),o($Vp1,[2,75]),{8:68,15:$V1,24:39,41:$VE,43:266,44:103,47:98,48:28,49:29,50:30,51:31,53:32,54:33,55:34,56:35,57:36,58:37,59:$V9,60:97,61:$VB,62:$VC,63:$Va,64:$Vb,66:$Vc,78:$Vd,79:$Ve,83:$Vf,84:$Vg,88:$Vh,94:$Vi,95:$Vj,96:$Vk,97:58,98:$Vl,99:$Vm,100:54,103:59,105:55,106:52,107:56,108:$Vn,109:$Vo,110:$Vp,111:$Vq,112:$Vr,113:$Vs,114:$Vt,115:76,118:75,119:74,122:73,127:72,130:67,132:57,134:53,136:51,137:50},{9:[2,84]},o($VA,[2,82])],\ndefaultActions: {4:[2,1],10:[2,2],150:[2,20],151:[2,21],152:[2,22],153:[2,23],154:[2,24],155:[2,25],156:[2,26],157:[2,27],158:[2,28],214:[2,94],215:[2,96],255:[2,71],265:[2,84]},\nparseError: function parseError(str, hash) {\n    if (hash.recoverable) {\n        this.trace(str);\n    } else {\n        throw new Error(str);\n    }\n},\nparse: function parse(input) {\n    var self = this, stack = [0], tstack = [], vstack = [null], lstack = [], table = this.table, yytext = '', yylineno = 0, yyleng = 0, recovering = 0, TERROR = 2, EOF = 1;\n    var args = lstack.slice.call(arguments, 1);\n    var lexer = Object.create(this.lexer);\n    var sharedState = { yy: {} };\n    for (var k in this.yy) {\n        if (Object.prototype.hasOwnProperty.call(this.yy, k)) {\n            sharedState.yy[k] = this.yy[k];\n        }\n    }\n    lexer.setInput(input, sharedState.yy);\n    sharedState.yy.lexer = lexer;\n    sharedState.yy.parser = this;\n    if (typeof lexer.yylloc == 'undefined') {\n        lexer.yylloc = {};\n    }\n    var yyloc = lexer.yylloc;\n    lstack.push(yyloc);\n    var ranges = lexer.options && lexer.options.ranges;\n    if (typeof sharedState.yy.parseError === 'function') {\n        this.parseError = sharedState.yy.parseError;\n    } else {\n        this.parseError = Object.getPrototypeOf(this).parseError;\n    }\n    function popStack(n) {\n        stack.length = stack.length - 2 * n;\n        vstack.length = vstack.length - n;\n        lstack.length = lstack.length - n;\n    }\n    _token_stack:\n        function lex() {\n            var token;\n            token = lexer.lex() || EOF;\n            if (typeof token !== 'number') {\n                token = self.symbols_[token] || token;\n            }\n            return token;\n        }\n    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;\n    while (true) {\n        state = stack[stack.length - 1];\n        if (this.defaultActions[state]) {\n            action = this.defaultActions[state];\n        } else {\n            if (symbol === null || typeof symbol == 'undefined') {\n                symbol = lex();\n            }\n            action = table[state] && table[state][symbol];\n        }\n                    if (typeof action === 'undefined' || !action.length || !action[0]) {\n                var errStr = '';\n                expected = [];\n                for (p in table[state]) {\n                    if (this.terminals_[p] && p > TERROR) {\n                        expected.push('\\'' + this.terminals_[p] + '\\'');\n                    }\n                }\n                if (lexer.showPosition) {\n                    errStr = 'Parse error on line ' + (yylineno + 1) + ':\\n' + lexer.showPosition() + '\\nExpecting ' + expected.join(', ') + ', got \\'' + (this.terminals_[symbol] || symbol) + '\\'';\n                } else {\n                    errStr = 'Parse error on line ' + (yylineno + 1) + ': Unexpected ' + (symbol == EOF ? 'end of input' : '\\'' + (this.terminals_[symbol] || symbol) + '\\'');\n                }\n                this.parseError(errStr, {\n                    text: lexer.match,\n                    token: this.terminals_[symbol] || symbol,\n                    line: lexer.yylineno,\n                    loc: yyloc,\n                    expected: expected\n                });\n            }\n        if (action[0] instanceof Array && action.length > 1) {\n            throw new Error('Parse Error: multiple actions possible at state: ' + state + ', token: ' + symbol);\n        }\n        switch (action[0]) {\n        case 1:\n            stack.push(symbol);\n            vstack.push(lexer.yytext);\n            lstack.push(lexer.yylloc);\n            stack.push(action[1]);\n            symbol = null;\n            if (!preErrorSymbol) {\n                yyleng = lexer.yyleng;\n                yytext = lexer.yytext;\n                yylineno = lexer.yylineno;\n                yyloc = lexer.yylloc;\n                if (recovering > 0) {\n                    recovering--;\n                }\n            } else {\n                symbol = preErrorSymbol;\n                preErrorSymbol = null;\n            }\n            break;\n        case 2:\n            len = this.productions_[action[1]][1];\n            yyval.$ = vstack[vstack.length - len];\n            yyval._$ = {\n                first_line: lstack[lstack.length - (len || 1)].first_line,\n                last_line: lstack[lstack.length - 1].last_line,\n                first_column: lstack[lstack.length - (len || 1)].first_column,\n                last_column: lstack[lstack.length - 1].last_column\n            };\n            if (ranges) {\n                yyval._$.range = [\n                    lstack[lstack.length - (len || 1)].range[0],\n                    lstack[lstack.length - 1].range[1]\n                ];\n            }\n            r = this.performAction.apply(yyval, [\n                yytext,\n                yyleng,\n                yylineno,\n                sharedState.yy,\n                action[1],\n                vstack,\n                lstack\n            ].concat(args));\n            if (typeof r !== 'undefined') {\n                return r;\n            }\n            if (len) {\n                stack = stack.slice(0, -1 * len * 2);\n                vstack = vstack.slice(0, -1 * len);\n                lstack = lstack.slice(0, -1 * len);\n            }\n            stack.push(this.productions_[action[1]][0]);\n            vstack.push(yyval.$);\n            lstack.push(yyval._$);\n            newState = table[stack[stack.length - 2]][stack[stack.length - 1]];\n            stack.push(newState);\n            break;\n        case 3:\n            return true;\n        }\n    }\n    return true;\n}};\n\n/* generated by jison-lex 0.3.4 */\nvar lexer = (function(){\nvar lexer = ({\n\nEOF:1,\n\nparseError:function parseError(str, hash) {\n        if (this.yy.parser) {\n            this.yy.parser.parseError(str, hash);\n        } else {\n            throw new Error(str);\n        }\n    },\n\n// resets the lexer, sets new input\nsetInput:function (input, yy) {\n        this.yy = yy || this.yy || {};\n        this._input = input;\n        this._more = this._backtrack = this.done = false;\n        this.yylineno = this.yyleng = 0;\n        this.yytext = this.matched = this.match = '';\n        this.conditionStack = ['INITIAL'];\n        this.yylloc = {\n            first_line: 1,\n            first_column: 0,\n            last_line: 1,\n            last_column: 0\n        };\n        if (this.options.ranges) {\n            this.yylloc.range = [0,0];\n        }\n        this.offset = 0;\n        return this;\n    },\n\n// consumes and returns one char from the input\ninput:function () {\n        var ch = this._input[0];\n        this.yytext += ch;\n        this.yyleng++;\n        this.offset++;\n        this.match += ch;\n        this.matched += ch;\n        var lines = ch.match(/(?:\\r\\n?|\\n).*/g);\n        if (lines) {\n            this.yylineno++;\n            this.yylloc.last_line++;\n        } else {\n            this.yylloc.last_column++;\n        }\n        if (this.options.ranges) {\n            this.yylloc.range[1]++;\n        }\n\n        this._input = this._input.slice(1);\n        return ch;\n    },\n\n// unshifts one char (or a string) into the input\nunput:function (ch) {\n        var len = ch.length;\n        var lines = ch.split(/(?:\\r\\n?|\\n)/g);\n\n        this._input = ch + this._input;\n        this.yytext = this.yytext.substr(0, this.yytext.length - len);\n        //this.yyleng -= len;\n        this.offset -= len;\n        var oldLines = this.match.split(/(?:\\r\\n?|\\n)/g);\n        this.match = this.match.substr(0, this.match.length - 1);\n        this.matched = this.matched.substr(0, this.matched.length - 1);\n\n        if (lines.length - 1) {\n            this.yylineno -= lines.length - 1;\n        }\n        var r = this.yylloc.range;\n\n        this.yylloc = {\n            first_line: this.yylloc.first_line,\n            last_line: this.yylineno + 1,\n            first_column: this.yylloc.first_column,\n            last_column: lines ?\n                (lines.length === oldLines.length ? this.yylloc.first_column : 0)\n                 + oldLines[oldLines.length - lines.length].length - lines[0].length :\n              this.yylloc.first_column - len\n        };\n\n        if (this.options.ranges) {\n            this.yylloc.range = [r[0], r[0] + this.yyleng - len];\n        }\n        this.yyleng = this.yytext.length;\n        return this;\n    },\n\n// When called from action, caches matched text and appends it on next action\nmore:function () {\n        this._more = true;\n        return this;\n    },\n\n// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.\nreject:function () {\n        if (this.options.backtrack_lexer) {\n            this._backtrack = true;\n        } else {\n            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\\n' + this.showPosition(), {\n                text: \"\",\n                token: null,\n                line: this.yylineno\n            });\n\n        }\n        return this;\n    },\n\n// retain first n characters of the match\nless:function (n) {\n        this.unput(this.match.slice(n));\n    },\n\n// displays already matched input, i.e. for error messages\npastInput:function () {\n        var past = this.matched.substr(0, this.matched.length - this.match.length);\n        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\\n/g, \"\");\n    },\n\n// displays upcoming input, i.e. for error messages\nupcomingInput:function () {\n        var next = this.match;\n        if (next.length < 20) {\n            next += this._input.substr(0, 20-next.length);\n        }\n        return (next.substr(0,20) + (next.length > 20 ? '...' : '')).replace(/\\n/g, \"\");\n    },\n\n// displays the character position where the lexing error occurred, i.e. for error messages\nshowPosition:function () {\n        var pre = this.pastInput();\n        var c = new Array(pre.length + 1).join(\"-\");\n        return pre + this.upcomingInput() + \"\\n\" + c + \"^\";\n    },\n\n// test the lexed token: return FALSE when not a match, otherwise return token\ntest_match:function (match, indexed_rule) {\n        var token,\n            lines,\n            backup;\n\n        if (this.options.backtrack_lexer) {\n            // save context\n            backup = {\n                yylineno: this.yylineno,\n                yylloc: {\n                    first_line: this.yylloc.first_line,\n                    last_line: this.last_line,\n                    first_column: this.yylloc.first_column,\n                    last_column: this.yylloc.last_column\n                },\n                yytext: this.yytext,\n                match: this.match,\n                matches: this.matches,\n                matched: this.matched,\n                yyleng: this.yyleng,\n                offset: this.offset,\n                _more: this._more,\n                _input: this._input,\n                yy: this.yy,\n                conditionStack: this.conditionStack.slice(0),\n                done: this.done\n            };\n            if (this.options.ranges) {\n                backup.yylloc.range = this.yylloc.range.slice(0);\n            }\n        }\n\n        lines = match[0].match(/(?:\\r\\n?|\\n).*/g);\n        if (lines) {\n            this.yylineno += lines.length;\n        }\n        this.yylloc = {\n            first_line: this.yylloc.last_line,\n            last_line: this.yylineno + 1,\n            first_column: this.yylloc.last_column,\n            last_column: lines ?\n                         lines[lines.length - 1].length - lines[lines.length - 1].match(/\\r?\\n?/)[0].length :\n                         this.yylloc.last_column + match[0].length\n        };\n        this.yytext += match[0];\n        this.match += match[0];\n        this.matches = match;\n        this.yyleng = this.yytext.length;\n        if (this.options.ranges) {\n            this.yylloc.range = [this.offset, this.offset += this.yyleng];\n        }\n        this._more = false;\n        this._backtrack = false;\n        this._input = this._input.slice(match[0].length);\n        this.matched += match[0];\n        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);\n        if (this.done && this._input) {\n            this.done = false;\n        }\n        if (token) {\n            return token;\n        } else if (this._backtrack) {\n            // recover context\n            for (var k in backup) {\n                this[k] = backup[k];\n            }\n            return false; // rule action called reject() implying the next rule should be tested instead.\n        }\n        return false;\n    },\n\n// return next match in input\nnext:function () {\n        if (this.done) {\n            return this.EOF;\n        }\n        if (!this._input) {\n            this.done = true;\n        }\n\n        var token,\n            match,\n            tempMatch,\n            index;\n        if (!this._more) {\n            this.yytext = '';\n            this.match = '';\n        }\n        var rules = this._currentRules();\n        for (var i = 0; i < rules.length; i++) {\n            tempMatch = this._input.match(this.rules[rules[i]]);\n            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {\n                match = tempMatch;\n                index = i;\n                if (this.options.backtrack_lexer) {\n                    token = this.test_match(tempMatch, rules[i]);\n                    if (token !== false) {\n                        return token;\n                    } else if (this._backtrack) {\n                        match = false;\n                        continue; // rule action called reject() implying a rule MISmatch.\n                    } else {\n                        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)\n                        return false;\n                    }\n                } else if (!this.options.flex) {\n                    break;\n                }\n            }\n        }\n        if (match) {\n            token = this.test_match(match, rules[index]);\n            if (token !== false) {\n                return token;\n            }\n            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)\n            return false;\n        }\n        if (this._input === \"\") {\n            return this.EOF;\n        } else {\n            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\\n' + this.showPosition(), {\n                text: \"\",\n                token: null,\n                line: this.yylineno\n            });\n        }\n    },\n\n// return next match that has a token\nlex:function lex() {\n        var r = this.next();\n        if (r) {\n            return r;\n        } else {\n            return this.lex();\n        }\n    },\n\n// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)\nbegin:function begin(condition) {\n        this.conditionStack.push(condition);\n    },\n\n// pop the previously active lexer condition state off the condition stack\npopState:function popState() {\n        var n = this.conditionStack.length - 1;\n        if (n > 0) {\n            return this.conditionStack.pop();\n        } else {\n            return this.conditionStack[0];\n        }\n    },\n\n// produce the lexer rule set which is active for the currently active lexer condition state\n_currentRules:function _currentRules() {\n        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {\n            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;\n        } else {\n            return this.conditions[\"INITIAL\"].rules;\n        }\n    },\n\n// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available\ntopState:function topState(n) {\n        n = this.conditionStack.length - 1 - Math.abs(n || 0);\n        if (n >= 0) {\n            return this.conditionStack[n];\n        } else {\n            return \"INITIAL\";\n        }\n    },\n\n// alias for begin(condition)\npushState:function pushState(condition) {\n        this.begin(condition);\n    },\n\n// return the number of states currently on the stack\nstateStackSize:function stateStackSize() {\n        return this.conditionStack.length;\n    },\noptions: {\"case-insensitive\":true},\nperformAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {\nvar YYSTATE=YY_START;\nswitch($avoiding_name_collisions) {\ncase 0: /* ignore */ \nbreak;\ncase 1: return 63; \nbreak;\ncase 2: return 46; \nbreak;\ncase 3: return 66; \nbreak;\ncase 4: return 71; \nbreak;\ncase 5: return 74; \nbreak;\ncase 6: return 83; \nbreak;\ncase 7: return 84; \nbreak;\ncase 8: return 79; \nbreak;\ncase 9: return 82; \nbreak;\ncase 10: return 78; \nbreak;\ncase 11: return 84; \nbreak;\ncase 12: return 85; \nbreak;\ncase 13: return 87; \nbreak;\ncase 14: return 88; \nbreak;\ncase 15: return 61; \nbreak;\ncase 16: return 62; \nbreak;\ncase 17: return 94; \nbreak;\ncase 18: return 95; \nbreak;\ncase 19: return 96; \nbreak;\ncase 20: return 59; \nbreak;\ncase 21: return 95; \nbreak;\ncase 22: return 7; \nbreak;\ncase 23: return 16; \nbreak;\ncase 24: return 18; \nbreak;\ncase 25: return 20; \nbreak;\ncase 26: return 21; \nbreak;\ncase 27: return 37; \nbreak;\ncase 28: return 'FUNCTION'; \nbreak;\ncase 29: return 39; \nbreak;\ncase 30: return 41; \nbreak;\ncase 31: return 27; \nbreak;\ncase 32: return 28; \nbreak;\ncase 33: return 29; \nbreak;\ncase 34: return 30; \nbreak;\ncase 35: return 31; \nbreak;\ncase 36: return 32; \nbreak;\ncase 37: return 33; \nbreak;\ncase 38: return 34; \nbreak;\ncase 39: return 35; \nbreak;\ncase 40: return 9; \nbreak;\ncase 41: return 64; \nbreak;\ncase 42: return 65; \nbreak;\ncase 43: return 101; \nbreak;\ncase 44: return 102; \nbreak;\ncase 45: return 76; \nbreak;\ncase 46: return 23; \nbreak;\ncase 47: return 142; \nbreak;\ncase 48: return 143; \nbreak;\ncase 49: return 140; \nbreak;\ncase 50: return 139; \nbreak;\ncase 51: return 141; \nbreak;\ncase 52: return 146; \nbreak;\ncase 53: return 148; \nbreak;\ncase 54: return 147; \nbreak;\ncase 55: return 144; \nbreak;\ncase 56: return 145; \nbreak;\ncase 57: return 128; \nbreak;\ncase 58: return 126; \nbreak;\ncase 59: return '=>'; \nbreak;\ncase 60: return 125; \nbreak;\ncase 61: return 129; \nbreak;\ncase 62: return 129; \nbreak;\ncase 63: return 123; \nbreak;\ncase 64: return 124; \nbreak;\ncase 65: return 131; \nbreak;\ncase 66: return 131; \nbreak;\ncase 67: return 110; \nbreak;\ncase 68: return 135; \nbreak;\ncase 69: return 135; \nbreak;\ncase 70: return '^^'; \nbreak;\ncase 71: return '^^'; \nbreak;\ncase 72: return 133; \nbreak;\ncase 73: return 121; \nbreak;\ncase 74: return 120; \nbreak;\ncase 75: return 108; \nbreak;\ncase 76: return 109; \nbreak;\ncase 77: return 112; \nbreak;\ncase 78: return 113; \nbreak;\ncase 79: return 23; \nbreak;\ncase 80: return 116; \nbreak;\ncase 81: return 111; \nbreak;\ncase 82: return 117; \nbreak;\ncase 83: return 117; \nbreak;\ncase 84: return 114; \nbreak;\ncase 85: return 114; \nbreak;\ncase 86: return 110; \nbreak;\ncase 87: return 111; \nbreak;\ncase 88: return 77; \nbreak;\ncase 89: return 73; \nbreak;\ncase 90: return 104; \nbreak;\ncase 91: return 98; \nbreak;\ncase 92: return 99; \nbreak;\ncase 93: return 15; \nbreak;\ncase 94: return 5; \nbreak;\n}\n},\nrules: [/^(?:\\s+)/i,/^(?:IF\\b)/i,/^(?:ELSE\\b)/i,/^(?:SWITCH\\b)/i,/^(?:CASE\\b)/i,/^(?:DEFAULT\\b)/i,/^(?:LOOP\\b)/i,/^(?:FROM\\b)/i,/^(?:REPEAT\\b)/i,/^(?:UNTIL\\b)/i,/^(?:WHILE\\b)/i,/^(?:FROM\\b)/i,/^(?:TO\\b)/i,/^(?:STEP\\b)/i,/^(?:FOR\\b)/i,/^(?:BREAK\\b)/i,/^(?:CONTINUE\\b)/i,/^(?:RETURN\\b)/i,/^(?:FRAME\\b)/i,/^(?:CLONE\\b)/i,/^(?:DEBUG\\b)/i,/^(?:FRAME\\b)/i,/^(?:PROGRAM\\b)/i,/^(?:CONST\\b)/i,/^(?:GLOBAL\\b)/i,/^(?:LOCAL\\b)/i,/^(?:PRIVATE\\b)/i,/^(?:PROCESS\\b)/i,/^(?:FUNCTION\\b)/i,/^(?:BEGIN\\b)/i,/^(?:END\\b)/i,/^(?:INT POINTER\\b)/i,/^(?:INT\\b)/i,/^(?:WORD POINTER\\b)/i,/^(?:WORD\\b)/i,/^(?:BYTE POINTER\\b)/i,/^(?:BYTE\\b)/i,/^(?:STRING POINTER\\b)/i,/^(?:STRING\\b)/i,/^(?:STRUCT POINTER\\b)/i,/^(?:;)/i,/^(?:\\()/i,/^(?:\\))/i,/^(?:\\[)/i,/^(?:\\])/i,/^(?:,)/i,/^(?::=)/i,/^(?:\\+=)/i,/^(?:-=)/i,/^(?:\\/=)/i,/^(?:\\*=)/i,/^(?:%=)/i,/^(?:&=)/i,/^(?:\\|=)/i,/^(?:\\^=)/i,/^(?:<<=)/i,/^(?:>>=)/i,/^(?:==)/i,/^(?:>=)/i,/^(?:=>)/i,/^(?:<=)/i,/^(?:<>)/i,/^(?:!=)/i,/^(?:<)/i,/^(?:>)/i,/^(?:AND\\b)/i,/^(?:&&)/i,/^(?:&)/i,/^(?:OR\\b)/i,/^(?:\\|\\|)/i,/^(?:XOR\\b)/i,/^(?:\\^\\^)/i,/^(?:\\^)/i,/^(?:>>)/i,/^(?:<<)/i,/^(?:\\+\\+)/i,/^(?:--)/i,/^(?:\\+)/i,/^(?:-)/i,/^(?:=)/i,/^(?:\\/)/i,/^(?:\\*)/i,/^(?:MOD\\b)/i,/^(?:%)/i,/^(?:NOT\\b)/i,/^(?:!)/i,/^(?:OFFSET\\b)/i,/^(?:POINTER\\b)/i,/^(?:\\.\\.)/i,/^(?::)/i,/^(?:\\.)/i,/^(?:(\"\")|(\".*?([^\\\\]\")))/i,/^(?:[0-9]+)/i,/^(?:([a-zñçæâäàåáêëèéîïìíôöòóûüùúÿ#ªº$þƒ£¥¢_][0-9a-zñçæâäàåáêëèéîïìíôöòóûüùúÿ#ªº$þƒ£¥¢_]*))/i,/^(?:$)/i],\nconditions: {\"INITIAL\":{\"rules\":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94],\"inclusive\":true}}\n});\nreturn lexer;\n})();\nparser.lexer = lexer;\nreturn parser;\n});\n",
    "\ndefine('ast',[], function () {\n  'use strict';\n\n  function Node() {}\n\n  Node.prototype.pojo = function () {\n    return JSON.parse(JSON.stringify(this));\n  };\n\n  function BlockStatement(statements) {\n    if (!Array.isArray(statements)) { statements = [statements]; }\n    this.type = 'BlockStatement';\n    this.body = statements;\n  }\n  inherits(BlockStatement, Node);\n\n  function BreakStatement(label) {\n    this.type = 'BreakStatement';\n    this.label = label || null;\n  }\n  inherits(BreakStatement, Node);\n\n  /* jshint maxparams: 6 */\n  function FunctionDeclaration(id, params, defaults, body,\n                               generator, expression) {\n    this.type = 'FunctionDeclaration';\n    this.id = id || null;\n    this.params = params || [];\n    this.defaults = defaults || [];\n    this.body = new BlockStatement(body);\n    this.generator = generator || false;\n    this.expression = expression || false;\n  }\n  inherits(FunctionDeclaration, Node);\n\n  function Identifier(name) {\n    this.type = 'Identifier';\n    this.name = name;\n  }\n  inherits(Identifier, Node);\n\n  function Literal(value, raw) {\n    this.type = 'Literal';\n    this.value = value;\n    this.raw = raw || JSON.stringify(value);\n  }\n  inherits(Literal, Node);\n\n  function Program(body) {\n    this.type = 'Program';\n    this.body = body;\n  }\n  inherits(Program, Node);\n\n  function ReturnStatement(expression) {\n    this.type = 'ReturnStatement';\n    this.argument = expression || null;\n  }\n  inherits(ReturnStatement, Node);\n\n  function SwitchCase(test, sentences) {\n    this.type = 'SwitchCase';\n    this.test = test;\n    this.consequent = sentences || [];\n  }\n  inherits(SwitchCase, Node);\n\n  function SwitchStatement(discriminant, cases) {\n    this.type = 'SwitchStatement';\n    this.discriminant = discriminant;\n    this.cases = cases || [];\n  }\n  inherits(SwitchStatement, Node);\n\n  function WhileStatement(condition, statements) {\n    this.type = 'WhileStatement';\n    this.test = condition;\n    this.body = new BlockStatement(statements);\n  }\n  inherits(WhileStatement, Node);\n\n  function inherits(klass, base) {\n    klass.prototype = Object.create(base.prototype);\n    klass.prototype.constructor = klass;\n  }\n\n  return {\n    BlockStatement: BlockStatement,\n    BreakStatement: BreakStatement,\n    FunctionDeclaration: FunctionDeclaration,\n    Identifier: Identifier,\n    Literal: Literal,\n    Program: Program,\n    ReturnStatement: ReturnStatement,\n    SwitchCase: SwitchCase,\n    SwitchStatement: SwitchStatement,\n    WhileStatement: WhileStatement\n  };\n});\n\n",
    "\ndefine('templates',['ast'], function (ast) {\n  'use strict';\n\n  return {\n\n    concurrentBody: function (cases) {\n      var programCounter = this.programCounter;\n      var switchStatement = new ast.SwitchStatement(programCounter, cases);\n      return this.infiniteLoop(switchStatement);\n    },\n\n    concurrentLabel: function (label) {\n      return new ast.SwitchCase(new ast.Literal(label));\n    },\n\n    get endToken() {\n      return {\n        type: 'Identifier',\n        name: '__PROCESS_END'\n      };\n    },\n\n    infiniteLoop: function (body) {\n      return new ast.WhileStatement(this.trueLiteral, body);\n    },\n\n    labeledBlock: function (label) {\n      return new ast.SwitchCase(new ast.Literal(label));\n    },\n\n    get processEndReturn() {\n      return new ast.ReturnStatement(this.endToken);\n    },\n\n    processFunction: function (name, body) {\n      return new ast.FunctionDeclaration(\n        new ast.Identifier('program_' + name),\n        this.processParameters, null,\n        body\n      );\n    },\n\n    get processParameters() {\n      return [\n        {\n          type: 'Identifier',\n          name: 'mem'\n        },\n        {\n          type: 'Identifier',\n          name: 'exec'\n        },\n        {\n          type: 'Identifier',\n          name: 'args'\n        }\n      ];\n    },\n\n    get programCounter() {\n      return {\n        type: 'MemberExpression',\n        computed: false,\n        object: {\n          type: 'Identifier',\n          name: 'exec'\n        },\n        property: {\n          type: 'Identifier',\n          name: 'pc'\n        }\n      };\n    },\n\n    get trueLiteral() {\n      return {\n        type: 'Literal',\n        value: true,\n        raw: 'true'\n      };\n    }\n\n  };\n});\n\n",
    "\ndefine('context',['ast', 'templates'], function (ast, t) {\n  'use strict';\n\n  function Context() {}\n\n  Context.prototype = {\n    constructor: Context,\n\n    startLinearization: function () {\n      this._currentLinearization = new Linearization();\n    },\n\n    getLinearizationCases: function () {\n      return this._currentLinearization.getCases();\n    },\n\n    verbatim: function (ast) {\n      return this._currentLinearization.verbatim(ast);\n    }\n  };\n\n  function Linearization() {\n    this._pc = -1;\n    this._labels = [];\n    this._sentences = [];\n  }\n\n  Linearization.prototype = {\n    constructor: Linearization,\n\n    getCases: function () {\n      var cases = [];\n      var sentences = this._sentences;\n      var currentCase = null;\n\n      // This is like a merge sort with preference on cases over instructions\n      for (var i = 0, sentence; (sentence = sentences[i]); i++) {\n        if (i === this._labels[0]) {\n\n          // End current case\n          if (currentCase) {\n            currentCase.sentences.push(new ast.BreakStatement());\n          }\n\n          currentCase = t.concurrentLabel(i + 1);\n          cases.push(currentCase);\n\n          this._labels.shift();\n        }\n        currentCase.consequent.push(sentence);\n      }\n      return cases;\n    },\n\n    verbatim: function (ast) {\n      this._addSentence(ast);\n    },\n\n    _addSentence: function (ast) {\n      if (!this._sentences.length) {\n        this._labels.push(0);\n        this._nextLabel = 0;\n      }\n      this._pc += 1;\n      this._sentences.push(ast);\n    }\n  };\n\n  return {\n    Context: Context,\n    Linearization: Linearization\n  };\n\n});\n\n",
    "\ndefine('div2trans',['context', 'ast', 'templates'], function (ctx, ast, t) {\n  'use strict';\n\n  var translators = Object.create(null);\n\n  translators.Unit = function (divUnit, context) {\n    var programFunction = translate(divUnit.program, context);\n    var processesFunctions = divUnit.processes.map(function (divProcess) {\n      return translate(divProcess, context);\n    });\n    return new ast.Program([programFunction].concat(processesFunctions));\n  };\n\n  translators.Program = function (divProgram, context) {\n    var name = divProgram.name.name;\n    var body = translate(divProgram.body, context);\n    return t.processFunction(name, body);\n  };\n\n  translators.ProcessBody = function (divBody, context) {\n    context.startLinearization();\n\n    divBody.sentences.map(function (sentence) {\n      translate(sentence, context);\n    });\n\n    // Add implicit return\n    context.verbatim(t.processEndReturn);\n\n    var bodyCases = context.getLinearizationCases();\n    return t.concurrentBody(bodyCases);\n  };\n\n  translators.Identifier = function (divIdentifier) {\n    return new ast.Identifier(divIdentifier.name);\n  };\n\n  translators.ExpressionSentence = function (divExpression) {\n    // TODO: translate this to jsast\n    return clone(divExpression);\n  };\n\n  function clone(obj) {\n    return JSON.parse(JSON.stringify(obj));\n  }\n\n  function translate(divAst, context) {\n    context = context || new ctx.Context();\n    if (!divAst || !divAst.type) { throw new Error('Invalid DIV2 AST'); }\n    if (!(divAst.type in translators)) {\n      throw new Error('Translation unavailable for ' + divAst.type + ' AST');\n    }\n    return translators[divAst.type](divAst, context);\n  }\n\n  return {\n    translate: translate\n  };\n});\n\n",
    "\ndefine('div2js',[\n  'div2lang',\n  'div2trans'\n], function (parser, translator) {\n  'use strict';\n\n  parser.yy = parser.yy || {};\n  parser.yy.parseError = parser.parseError;\n\n  return {\n    parser: parser,\n    translator: translator\n  };\n\n});\n\n"
  ]
}